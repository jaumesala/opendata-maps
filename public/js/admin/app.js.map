{"version":3,"sources":["app.js","components/mapView.js","pages/auth/email.js","pages/auth/login.js","pages/auth/register.js","pages/auth/reset.js","pages/dashboard/index.js","pages/map/create.js","pages/map/edit.js","pages/map/index.js","pages/map/show.js","pages/permission/index.js","pages/role/create.js","pages/role/edit.js","pages/role/index.js","pages/source/create.js","pages/source/edit.js","pages/source/index.js","pages/source/show.js","pages/settings/index.js","pages/user/create.js","pages/user/edit.js","pages/user/index.js"],"names":[],"mappingsldjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/* @preserve\n *\n * Author:  Jaume Sala\n * Website: jaumesala.net\n *\n */\n\n\n/* ---------- SITE OBJECT ---------- */\n\nSITE = {\n    common: {\n        init: function() {\n            console.log('common');\n        }\n    },\n\n    auth: {\n        init: function() {\n            console.log('auth');\n        }\n    },\n\n    dashboard: {\n        init: function() {\n            console.log('dashboard');\n        }\n    },\n\n    settings: {\n        init: function() {\n            console.log('settings');\n        }\n    },\n\n    user: {\n        init: function() {\n            console.log('user');\n        }\n    },\n\n    role: {\n        init: function() {\n            console.log('role');\n        }\n    },\n\n    permission: {\n        init: function() {\n            console.log('permission');\n        }\n    },\n\n    map: {\n        init: function() {\n            console.log('map');\n        }\n    },\n\n    source: {\n        init: function() {\n            console.log('source');\n        }\n    }\n\n}\n\n\n\n/* ---------------------------------------------------------------------------------------------------- */\nUTIL = {\n    exec: function(controller, action) {\n        var ns = SITE,\n            action = (action === undefined) ? \"init\" : action;\n\n        if (controller !== \"\" && ns[controller] && typeof ns[controller][action] == \"function\") {\n            ns[controller][action]();\n        }\n    },\n\n    init: function() {\n        var body = document.body,\n            controller = body.getAttribute(\"data-controller\").trim(),\n            action = body.getAttribute(\"data-action\").trim();\n\n        UTIL.exec(\"common\");\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n/* ---------------------------------------------------------------------------------------------------- */\n\n\n//Let's go baby!\n$(document).ready(UTIL.init);","\n/*\n|--------------------------------------------------------------------------\n| Map View Editor Object\n|--------------------------------------------------------------------------\n*/\n\nmapView = {\n\n    styles: {},\n    mv: this,\n    mode: 'viz',\n\n    init: function(){\n        mapView.mode ='viz';\n        mapView.initMap();\n    },\n\n    editorInit: function(mode){\n        mapView.mode = typeof mode !== 'undefined' ? mode : 'default';\n\n        $.when( mapView.getStyles() ).then(function(){\n            mapView.initStylesSelector();\n            if(mapView.mode == 'editor'){\n                mapView.initMap();\n            } else{\n                mapView.initDefaultMap();\n            }\n        });\n    },\n\n    getStyles: function (){\n        // console.log(\"getStyles\");\n        return $.get(  env.settings.mapbox.stylesApiUrl +\n                    env.settings.mapbox.username +\n                    '?access_token=' + env.settings.mapbox.secretToken, function(data){\n                        mapView.styles = data;\n                        if(mapView.mode == 'editor'){\n                            env.settings.maps.defaultStyle = map.style;\n                        } else {\n                            env.settings.maps.defaultStyle = data[0]['id'];\n                        }\n\n                    });\n    },\n\n    initStylesSelector: function (){\n        // console.log(\"initStylesSelector\");\n        for (var key in mapView.styles) {\n            // skip loop if the property is from prototype\n            if (!mapView.styles.hasOwnProperty(key)) continue;\n            var obj = mapView.styles[key];\n            $('<option/>').val(obj.id).text(obj.name).data('obj', obj).appendTo($('#style'));\n        }\n\n        if(mapView.mode == 'editor'){\n            $('#style').val(map.style).trigger(\"change\");\n        } else {\n            $('#style').val(env.settings.maps.defaultStyle).trigger(\"change\");\n        }\n    },\n\n    initDefaultMap: function(){\n        mapboxgl.accessToken = env.settings.mapbox.accessToken;\n        mapView.map = new mapboxgl.Map({\n            container: 'map-view', // container id\n            style: 'mapbox://styles/'+env.settings.mapbox.username+'/' + env.settings.maps.defaultStyle, //stylesheet location\n            center: [env.settings.maps.defaultLongitude, env.settings.maps.defaultLatitude], // starting position\n            zoom: env.settings.maps.defaultZoom, // starting zoom\n            pitch: 0, //env.settings.maps.defaultPitch, // pitch in degrees\n            bearing: env.settings.maps.defaultBearing, // bearing in degrees\n            attributionControl: false,\n        });\n\n        mapView.map.addControl(new mapboxgl.Navigation());\n\n        mapView.bindControls();\n    },\n\n    initMap: function (){\n        mapboxgl.accessToken = env.settings.mapbox.accessToken;\n\n        mapView.map = new mapboxgl.Map({\n            container: 'map-view', // container id\n            style: 'mapbox://styles/'+env.settings.mapbox.username+'/' + map.style, //stylesheet location\n            center: [map.longitude, map.latitude], // starting position\n            zoom: map.zoom, // starting zoom\n            pitch: 0, //map.Pitch, // pitch in degrees\n            bearing: map.bearing, // bearing in degrees\n            attributionControl: false,\n        });\n\n        mapView.map.on('style.load', function () {\n            console.log(\"Map Initialized\");\n\n            mapView.map.addControl(new mapboxgl.Navigation());\n\n            if(mapView.mode != 'editor'){\n                mapView.bindControls();\n            }\n\n            mapView.addMapSources();\n            mapView.addMapLayers();\n\n        });\n    },\n\n    bindControls: function(){\n        $('#style').on(\"change\", function(){\n            // var style = $(this).find(\":selected\").data('obj');\n            mapView.map.setStyle('mapbox://styles/'+env.settings.mapbox.username+'/' + $(this).val());\n        });\n\n        mapView.map.on('move', function(){\n            var latLng = mapView.map.getCenter();\n            $('#latitude, #latitudeDisabled').val(latLng.lat);\n            $('#longitude, #longitudeDisabled').val(latLng.lng);\n        });\n\n        mapView.map.on('zoom', function(){\n            var zoom = mapView.map.getZoom();\n            $('#zoom, #zoomDisabled').val(Math.round(zoom));\n        });\n\n        mapView.map.on('rotate', function(){\n            var bearing = mapView.map.getBearing();\n            $('#bearing, #bearingDisabled').val(Math.round(bearing));\n        });\n    },\n\n    addMapSources: function(){\n\n        // get all layer sources\n        sources = [];\n\n        _.each(map.layers, function(layer){\n            sources.push(layer.source);\n        });\n        // console.log(sources);\n\n        // remove duplicates (multiple layers can use the same source)\n        sources = _.uniq(sources, _.property('id'))\n\n        //save into map object\n        map.sources = sources;\n\n        // Add each source synchronously\n        _.each(map.sources, function(source){\n            mapView.map.addSource('source-'+source.id, {\n                'type': 'geojson',\n                'data': '/sources/'+source.hash+'.geojson'\n            });\n            // console.log('Source: '+source.id+' added');\n        });\n    },\n\n    addChoroplethSource: function(jsonSource, layer){\n        mapView.map.addSource('choropleth-layer-'+layer.id, {\n            'type': 'geojson',\n            'data': jsonSource\n        });\n    },\n\n    getPaintRules: function(layer, rules){\n        var paintRules = {};\n\n        if(_.contains(rules, 'dasharray')){\n\n            if(layer['dasharray'].length){\n                //convert string to array\n                var values = layer['dasharray'].split(',');\n                var valuesInt = _.map(values, function(v){ return parseInt(v) });\n                paintRules[layer.type+'-dasharray'] = valuesInt;\n            }\n\n            //remove property from array\n            var index = rules.indexOf('dasharray');\n            rules.splice(index, 1);\n        }\n\n        //rest of properties\n        _.each(rules, function(rule){\n\n            if(rule == 'opacity'){\n                paintRules[layer.type+'-opacity'] =  layer.opacity/10;\n                return; //continue loop\n            }\n\n            if(layer[rule]){\n                paintRules[layer.type+'-'+rule] = layer[rule];\n            }\n\n        });\n\n        // console.log(\"Paint rules:\", paintRules);\n\n        return paintRules;\n    },\n\n    getChoroplethClusters: function(layer, polygonData){\n        var clusters = layer['clusters'];\n        var schema = (layer['schema-color']) ? layer['schema-color'] : 'YlOrRd';\n\n        // Color scale using chroma.js\n        var scale = chroma.scale(schema).colors(clusters);\n\n        // Check if we need to reverse the color schema\n        if(layer['schema-reverse']){\n            scale.reverse();\n        }\n\n        var breaks = turf.jenks(polygonData, \"pt_count\", clusters-1).reverse();\n        // console.log(breaks);\n        return _.zip(scale, breaks);\n    },\n\n    addLayer: function(layer, paintRules, layoutRules){\n        mapView.map.addLayer({\n            'id': 'layer-'+layer.id,\n            'type': layer.type,\n            'source': 'source-'+layer.source.id,\n            'interactive': layer.interactive ? true : false,\n            'paint': paintRules,\n            'layout': layoutRules,\n            'minzoom': layer.minzoom,\n            'maxzoom': layer.maxzoom\n        });\n        console.log('Layer: layer-'+layer.id+' added');\n    },\n\n    addChoroplethLayers: function(colorLayers, layoutRules, layer, beforeLayer){\n\n        var bl = undefined;\n        if(typeof beforeLayer !== 'undefined') {\n            bl = 'layer-'+beforeLayer.id;\n        }\n\n        _.each(colorLayers, function(colorLayer, i) {\n            mapView.map.addLayer({\n                'id': 'layer-' + layer.id + '-choropleth-' + i,\n                // 'interactive': true,\n                'type': 'fill',\n                'source': 'choropleth-layer-'+layer.id,\n                // 'source-layer': 'water',\n                'paint': {\n                    'fill-color': colorLayer[0], // this layer will be painted according to the color in the palet\n                    'fill-opacity': layer.opacity/10\n                },\n                'layout': layoutRules,\n                'minzoom': layer.minzoom,\n                'maxzoom': layer.maxzoom\n            }, bl );\n            console.log('Layer: layer-' + layer.id + '-choropleth-' + i +' added');\n        });\n    },\n\n    filterChoroplethLayers: function(colorLayers, layer){\n        _.each(colorLayers, function(colorLayer, i) {\n            // filter all the areas \"where pt_count is >= current layer value\"\n            var filters = [\n                'all',\n                ['>=', 'pt_count', colorLayer[1]] //this is the breakpoint value\n            ];\n\n            // as we go down in the palet we have to add a \"and < previous layer value\"\n            if (i !== 0) filters.push(['<', 'pt_count', colorLayers[i - 1][1]]);\n            // console.log(filters);\n\n            //finally, we add the filter to the layer\n            mapView.map.setFilter('layer-' + layer.id + '-choropleth-' + i, filters);\n        });\n    },\n\n    addHeatmapSource: function(jsonSource, layer){\n\n        mapView.map.addSource('heatmap-layer-'+layer.id, {\n            'type': 'geojson',\n            'data': jsonSource,\n            'cluster': true,\n            'clusterMaxZoom': 15, // Max zoom to cluster points on\n            'clusterRadius': 20 // Use small cluster radius for the heatmap look\n        });\n    },\n\n    getHeatmapClusters: function(layer, polygonData){\n        var clusters = layer['clusters'];\n        var schema = (layer['schema-color']) ? layer['schema-color'] : 'YlOrRd';\n\n        // Color scale using chroma.js\n        var scale = chroma.scale(schema).colors(clusters);\n\n        // Check if we need to reverse the color schema\n        if(layer['schema-reverse']){\n            scale.reverse();\n        }\n\n        var breaks = turf.jenks(polygonData, \"pt_count\", clusters-1); //.reverse();\n        // console.log(breaks);\n        return _.zip(scale, breaks);\n\n    },\n\n    addHeatmapLayers: function(colorLayers, layoutRules, layer, beforeLayer){\n        var bl = undefined;\n        if(typeof beforeLayer !== 'undefined') {\n            bl = 'layer-'+beforeLayer.id;\n        }\n\n        mapView.map.addLayer({\n            'id': 'layer-' + layer.id + '-cluster-no',\n            'type': 'circle',\n            'source': 'heatmap-layer-'+layer.id,\n            'paint': {\n                'circle-color': colorLayers[0][0],\n                'circle-radius': layer.radius,\n                'circle-blur': layer.blur\n            },\n            'layout': layoutRules,\n            'minzoom': layer.minzoom,\n            'maxzoom': layer.maxzoom,\n            'filter': ['!=', 'cluster', true]\n        }, 'waterway-label');\n        console.log('Layer: layer-' + layer.id + '-cluster-no added');\n\n        colorLayers.forEach(function (colorLayer, i) {\n\n            var filter = i === colorLayers.length - 1 ?\n                ['>=', 'point_count', colorLayer[1]] :\n                ['all',\n                    ['>=', 'point_count', colorLayer[1]],\n                    ['<', 'point_count', colorLayers[i + 1][1]]];\n\n            // console.log(filter);\n\n            mapView.map.addLayer({\n                'id': 'layer-' + layer.id + '-cluster-' + i,\n                'type': 'circle',\n                'source': 'heatmap-layer-'+layer.id,\n                'paint': {\n                    'circle-color': colorLayer[0],\n                    'circle-radius': layer.radius,\n                    'circle-blur': layer.blur // blur the circles to get a heatmap look\n                },\n                'layout': layoutRules,\n                'minzoom': layer.minzoom,\n                'maxzoom': layer.maxzoom,\n                'filter':  filter\n            }, 'waterway-label');\n\n            console.log('Layer: layer-' + layer.id + '-cluster-' + i +' added');\n\n        });\n\n    },\n\n    addMapLayers: function(){\n        // Reverse the order so the first one is the one on the top (as in the editor view)\n        layers = map.layers.reverse();\n        // console.log(layers);\n        // Add each layer synchronously\n        _.each(layers, function(layer, layerIndex){\n\n            var paintRules = {};\n            var layoutRules = {};\n            var layerType = layer.type;\n\n            switch(layerType){\n                case 'fill':\n                    paintRules = mapView.getPaintRules(layer, ['opacity', 'color', 'outline-color']);\n\n                    layoutRules['visibility'] = layer.visible ? 'visible' : 'none';\n\n                    mapView.addLayer(layer, paintRules, layoutRules);\n\n                    break;\n                case 'line':\n                    paintRules = mapView.getPaintRules(layer, ['opacity', 'color', 'width', 'gap-width', 'blur', 'dasharray']);\n\n                    layoutRules['visibility'] = layer.visible ? 'visible' : 'none';\n\n                    mapView.addLayer(layer, paintRules, layoutRules);\n\n                    break;\n                case 'circle':\n                    paintRules = mapView.getPaintRules(layer, ['opacity', 'color', 'radius', 'blur']);\n\n                    layoutRules['visibility'] = layer.visible ? 'visible' : 'none';\n\n                    mapView.addLayer(layer, paintRules, layoutRules);\n                    break;\n                case 'choropleth':\n                    layoutRules['visibility'] = layer.visible ? 'visible' : 'none';\n\n                    //get points source\n                    var points = $.getJSON( '/sources/'+layer.source.hash+'.geojson' );\n                    // console.log(layer.source);\n\n                    //get polygons source\n                    var polygons = $.getJSON( '/sources/'+layer['choropleth-source']+'.geojson');\n\n                    $.when( points, polygons ).done(function( jsonPoints, jsonPolygons ) {\n\n                        // calculates the number of points that fall within each polygon\n                        var jsonPolygonsCount = turf.count(jsonPolygons[0], jsonPoints[0], 'pt_count');\n\n                        // choropleth = polygons + count(points within polygon)\n                        mapView.addChoroplethSource(jsonPolygonsCount, layer);\n\n                        // obtain the color schema and breakpoints of each one.\n                        var colorClusters = mapView.getChoroplethClusters(layer, jsonPolygonsCount);\n                        // console.log(colorClusters);\n\n                        // for each color in the color schema, create a layer\n                        // with all the polygons painted with this color.\n                        var beforeLayer = layers[layerIndex+1];\n                        mapView.addChoroplethLayers(colorClusters, layoutRules, layer, beforeLayer);\n\n                        // Once we have the layers we have to filter each layer according to the palet value\n                        mapView.filterChoroplethLayers(colorClusters, layer);\n\n                    });\n\n                    break;\n\n                case 'heatmap':\n                    layoutRules['visibility'] = layer.visible ? 'visible' : 'none';\n\n                    //get points source\n                    var points = $.getJSON( '/sources/'+layer.source.hash+'.geojson' );\n\n                    $.when( points ).done(function( jsonPoints ) {\n\n                        // Takes a bounding box and a cell depth and returns a set of square polygons in a grid.\n                        var extent = turf.extent(jsonPoints);\n                        var cellWidth = 0.2;\n                        var units = 'kilometers';\n                        var squareGrid = turf.squareGrid(extent, cellWidth, units);\n\n                        // calculates the number of points that fall within each cell of the grid\n                        var squareGridCount = turf.count(squareGrid, jsonPoints, 'pt_count');\n\n                        // add the source with clustering\n                        mapView.addHeatmapSource(jsonPoints, layer);\n\n                        // obtain the color schema and breakpoints from the grid.\n                        var colorClusters = mapView.getHeatmapClusters(layer, squareGridCount);\n                        // console.log(colorClusters);\n\n                        // for each color in the color schema create a layer:\n                        // one for each cluster category, and one for non-clustered points\n                        var beforeLayer = layers[layerIndex+1];\n                        mapView.addHeatmapLayers(colorClusters, layoutRules, layer, beforeLayer);\n\n                        // // Once we have the layers we have to filter each layer according to the palet value\n                        // // mapView.filterHeatmapLayers(colorClusters, layer);\n\n                    });\n\n\n\n                    break;\n            }\n\n        });\n    }\n\n};","SITE.auth.email = function(){\n\n    console.log('email');\n\n}","SITE.auth.login = function(){\n\n    console.log('login');\n\n\n    $('input').iCheck({\n        checkboxClass: 'icheckbox_square-blue',\n        radioClass: 'iradio_square-blue',\n        increaseArea: '20%' // optional\n    });\n\n}","SITE.auth.register = function(){\n\n    console.log('register');\n\n}","SITE.auth.reset = function(){\n\n    console.log('reset');\n\n}","SITE.dashboard.index = function(){\n\n    console.log('index');\n\n}","SITE.map.create = function(){\n\n    console.log('create');\n\n    var $select = $('.select2');\n    $select.each(function(){\n        $(this).css('width', '100%').select2( $(this).data('options') );\n    });\n    // var $oldValues = $select.data('old').toString().split(\",\");\n    // $('.select2').css('width', '100%').select2().val($oldValues).trigger(\"change\");\n\n    $window = $(window);\n    $mapView = $('#map-view');\n    $controlsView = $('#controls-view');\n\n    $mapView.height($window.height() - 195);\n    $controlsView.height($window.height() - 175);\n\n    $window.resize(function() {\n        $mapView.height($window.height() - 195);\n        $controlsView.height($window.height() - 175);\n    });\n\n    // mvCreator.init();\n    mapView.editorInit();\n}\n\n","SITE.map.edit = function(){\n\n    console.log('edit');\n\n    // Select2 logic\n    var $select = $('.select2');\n    $select.each(function(){\n        $(this).css('width', '100%').select2( $(this).data('options') );\n    });\n\n    // Views height logic\n    $window = $(window);\n    $mapView = $('#map-view');\n    $controlsView = $('#controls-view');\n\n    $mapView.height($window.height() - 195);\n    $controlsView.height($window.height() - 175);\n\n    $controlsView.find('.tab-content').height($window.height() - 175 - 64);\n\n    $window.resize(function() {\n        $mapView.height($window.height() - 195);\n        $controlsView.height($window.height() - 175);\n    });\n\n    // Layers scroll logic\n    $('#tab-layers > .tab-wrapper').slimScroll({\n        height: 'auto',\n        distance: '2px',\n    });\n\n    $('.sublist-wrapper').slimScroll({\n        height: '80px',\n        distance: '2px',\n        size: '3px'\n    });\n\n    // Confirm delete (layer) popup\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n    // XSRF config ajax request\n    $.ajaxSetup({\n        headers: {\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        }\n    });\n\n    // Sort layers\n    $('#layers').sortable({\n        axis: 'y',\n        cursor: 'move',\n        placeholder: \"sort-highlight\",\n        handle: \".box-header\",\n        forcePlaceholderSize: true,\n        zIndex: 999999,\n        update: function (event, ui) {\n            var data = $(this).sortable('serialize');\n            // POST to server using $.post or $.ajax\n            $.ajax({\n                data: data,\n                type: 'POST',\n                url: $(this).data('sort-url')\n            });\n        }\n    });\n\n    // init color and layout properties filter\n    $('.layerType').change(function(){\n        var value = $(this).val();\n        var paintRules = $(this).closest('.box-body').find('.paintRules .form-group');\n        var layoutRules = $(this).closest('.box-body').find('.layoutRules .form-group');\n        filterValues(value, paintRules);\n        filterValues(value, layoutRules);\n    });\n\n    $('.layerType').trigger('change');\n\n    // init color pickers\n    $(\".colorpicker\").colorpicker({\n        format: 'hex',\n        colorSelectors: {\n            '#000000': '#000000',\n            '#ffffff': '#ffffff',\n            '#5bc0de': '#5bc0de',\n            '#337ab7': '#337ab7',\n            '#5cb85c': '#5cb85c',\n            '#f0ad4e': '#f0ad4e',\n            '#d9534f': '#d9534f'\n        }\n    });\n\n    // filter properties\n    function filterValues(value, list){\n        list.each(function(){\n            var filter = $(this).data('filter');\n            if(filter.indexOf(value) > -1){\n                $(this).addClass('show').removeClass('hide');\n            } else {\n                $(this).addClass('hide').removeClass('show');\n            }\n        });\n    }\n\n    mapView.editorInit('editor');\n}\n","SITE.map.index = function(){\n\n    console.log('index');\n\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n}","SITE.map.show = function(){\n\n    console.log('show');\n\n    $window = $(window);\n    $mapView = $('#map-view');\n    $mapView.height($window.height() - 195);\n    $window.resize(function() {\n        // console.log($contentWrapper.height());\n        $mapView.height($window.height() - 195);\n    });\n\n    mapView.init();\n\n}","SITE.permission.index = function(){\n\n    console.log('index');\n\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n}","SITE.role.create = function(){\n\n    console.log('create');\n\n    var $select = $('.select2');\n    var $oldValues = $select.data('old').toString().split(\",\");\n    $('.select2').css('width', '100%').select2().val($oldValues).trigger(\"change\");\n\n}","SITE.role.edit = function(){\n\n    console.log('edit');\n\n    var $select = $('.select2');\n    var $oldValues = $select.data('old').toString().split(\",\");\n    $('.select2').css('width', '100%').select2().val($oldValues).trigger(\"change\");\n\n}","SITE.role.index = function(){\n\n    console.log('index');\n\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n}","SITE.source.create = function(){\n\n    console.log('create');\n\n    var hash = window.location.hash;\n    console.log(\"aa \"+hash);\n    $('#create-options a[href=\"' + hash + '\"]').tab('show');\n\n    var $select = $('.select2');\n    $('.select2').css('width', '100%').select2({ minimumResultsForSearch: -1 });\n\n    var oui = $('#origin_url');\n    var oub = $('#origin_url_check');\n    var ofs = $('#origin_format_static');\n    var oss = $('#origin_size_static');\n\n    oui.keyup(function(){\n        if($(this).val()){\n            oub.prop(\"disabled\", false);\n        } else {\n            oub.prop(\"disabled\", true);\n        }\n    });\n\n    oub.click(function(e){\n        e.preventDefault();\n\n        var dataUrl = oui.val();\n        var requestUrl = oub.data('url');\n\n        if(dataUrl){\n            // oub.prop(\"disabled\", true);\n            $(oub).find('.text').addClass('hidden');\n            $(oub).find('.spin').removeClass('hidden');\n\n            $.get(requestUrl, { 'origin_url' : dataUrl }, function(data, text, xhr){\n                if(xhr.status == 200){\n                    var size = data.data.fileSize;\n                    var type = data.data.fileType;\n\n                    ofs.text(type);\n                    oss.text(size);\n                }\n\n                $(oub).find('.text').removeClass('hidden');\n                $(oub).find('.spin').addClass('hidden');\n\n\n\n            });\n        }\n\n\n    });\n\n}","SITE.source.edit = function(){\n\n    console.log('edit');\n\n    // $('#confirmDelete').on('show.bs.modal', function (event) {\n    //     var button  = $(event.relatedTarget) // Button that triggered the modal\n    //     var action  = button.data('action') // Extract info from data-* attributes\n    //     var id      = button.data('id') // Extract info from data-* attributes\n\n    //     var modal = $(this)\n    //     modal.find('form').attr('action', action);\n    //     modal.find('input[name=id]').attr('value', id);\n    // });\n\n    var $select = $('.select2');\n    $('.select2').css('width', '100%').select2({ minimumResultsForSearch: -1 });\n\n}","SITE.source.index = function(){\n\n    console.log('index');\n\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n}","SITE.source.show = function(){\n\n    console.log('index');\n\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n}","SITE.settings.index = function(){\n\n    console.log('index');\n\n}","SITE.user.create = function(){\n\n    console.log('create');\n\n    var $select = $('.select2');\n    var $oldValues = $select.data('old').toString().split(\",\");\n    $('.select2').css('width', '100%').select2().val($oldValues).trigger(\"change\");\n\n}","SITE.user.edit = function(){\n\n    console.log('edit');\n\n    var $select = $('.select2');\n    var $oldValues = $select.data('old').toString().split(\",\");\n    $('.select2').css('width', '100%').select2().val($oldValues).trigger(\"change\");\n\n}","SITE.user.index = function(){\n\n    console.log('index');\n\n    $('#confirmDelete').on('show.bs.modal', function (event) {\n        var button  = $(event.relatedTarget) // Button that triggered the modal\n        var action  = button.data('action') // Extract info from data-* attributes\n        var id      = button.data('id') // Extract info from data-* attributes\n\n        var modal = $(this)\n        modal.find('form').attr('action', action);\n        modal.find('input[name=id]').attr('value', id);\n    });\n\n}"],"sourceRoot":"/source/"}